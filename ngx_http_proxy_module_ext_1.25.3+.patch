diff --git a/src/http/modules/ngx_http_fastcgi_module.c b/src/http/modules/ngx_http_fastcgi_module.c
index b989083..8b5f615 100644
--- a/src/http/modules/ngx_http_fastcgi_module.c
+++ b/src/http/modules/ngx_http_fastcgi_module.c
@@ -424,6 +424,13 @@ static ngx_command_t  ngx_http_fastcgi_commands[] = {
       offsetof(ngx_http_fastcgi_loc_conf_t, upstream.cache_valid),
       NULL },
 
+    { ngx_string("fastcgi_cache_min_age"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_1MORE,
+      ngx_conf_set_sec_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_fastcgi_loc_conf_t, upstream.cache_min_age),
+      NULL },
+
     { ngx_string("fastcgi_cache_min_uses"),
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
       ngx_conf_set_num_slot,
@@ -445,6 +452,21 @@ static ngx_command_t  ngx_http_fastcgi_commands[] = {
       offsetof(ngx_http_fastcgi_loc_conf_t, upstream.cache_use_stale),
       &ngx_http_fastcgi_next_upstream_masks },
 
+    { ngx_string("fastcgi_cache_stale_if_error"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
+      ngx_conf_set_sec_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_fastcgi_loc_conf_t, upstream.cache_stale_if_error),
+      NULL },
+
+    { ngx_string("fastcgi_cache_stale_while_revalidate"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
+      ngx_conf_set_sec_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_fastcgi_loc_conf_t,
+                upstream.cache_stale_while_revalidate),
+      NULL },
+
     { ngx_string("fastcgi_cache_methods"),
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_1MORE,
       ngx_conf_set_bitmask_slot,
@@ -559,6 +581,13 @@ static ngx_command_t  ngx_http_fastcgi_commands[] = {
       offsetof(ngx_http_fastcgi_loc_conf_t, upstream.ignore_headers),
       &ngx_http_upstream_ignore_headers_masks },
 
+    { ngx_string("fastcgi_ignore_cache_control"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_1MORE,
+      ngx_conf_set_bitmask_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_fastcgi_loc_conf_t, upstream.ignore_cache_control),
+      &ngx_http_upstream_ignore_cache_control_masks },
+
     { ngx_string("fastcgi_catch_stderr"),
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
       ngx_conf_set_str_array_slot,
@@ -2868,6 +2897,7 @@ ngx_http_fastcgi_create_loc_conf(ngx_conf_t *cf)
      *
      *     conf->upstream.bufs.num = 0;
      *     conf->upstream.ignore_headers = 0;
+     *     conf->upstream.ignore_cache_control = 0;
      *     conf->upstream.next_upstream = 0;
      *     conf->upstream.cache_zone = NULL;
      *     conf->upstream.cache_use_stale = 0;
@@ -2909,7 +2939,10 @@ ngx_http_fastcgi_create_loc_conf(ngx_conf_t *cf)
 
 #if (NGX_HTTP_CACHE)
     conf->upstream.cache = NGX_CONF_UNSET;
+    conf->upstream.cache_min_age = NGX_CONF_UNSET_UINT;
     conf->upstream.cache_min_uses = NGX_CONF_UNSET_UINT;
+    conf->upstream.cache_stale_if_error = NGX_CONF_UNSET_UINT;
+    conf->upstream.cache_stale_while_revalidate = NGX_CONF_UNSET_UINT;
     conf->upstream.cache_max_range_offset = NGX_CONF_UNSET;
     conf->upstream.cache_bypass = NGX_CONF_UNSET_PTR;
     conf->upstream.no_cache = NGX_CONF_UNSET_PTR;
@@ -3115,6 +3148,9 @@ ngx_http_fastcgi_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
                               prev->upstream.ignore_headers,
                               NGX_CONF_BITMASK_SET);
 
+    ngx_conf_merge_bitmask_value(conf->upstream.ignore_cache_control,
+                              prev->upstream.ignore_cache_control,
+                              NGX_CONF_BITMASK_SET);
 
     ngx_conf_merge_bitmask_value(conf->upstream.next_upstream,
                               prev->upstream.next_upstream,
@@ -3157,6 +3193,9 @@ ngx_http_fastcgi_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
         return NGX_CONF_ERROR;
     }
 
+    ngx_conf_merge_sec_value(conf->upstream.cache_min_age,
+                              prev->upstream.cache_min_age, 0);
+
     ngx_conf_merge_uint_value(conf->upstream.cache_min_uses,
                               prev->upstream.cache_min_uses, 1);
 
@@ -3178,6 +3217,12 @@ ngx_http_fastcgi_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
         conf->upstream.cache_use_stale |= NGX_HTTP_UPSTREAM_FT_NOLIVE;
     }
 
+    ngx_conf_merge_sec_value(conf->upstream.cache_stale_if_error,
+                              prev->upstream.cache_stale_if_error, 0);
+    ngx_conf_merge_sec_value(conf->upstream.cache_stale_while_revalidate,
+                              prev->upstream.cache_stale_while_revalidate,
+                              0);
+
     if (conf->upstream.cache_methods == 0) {
         conf->upstream.cache_methods = prev->upstream.cache_methods;
     }
diff --git a/src/http/modules/ngx_http_grpc_module.c b/src/http/modules/ngx_http_grpc_module.c
index dfe49c5..76f3dcb 100644
--- a/src/http/modules/ngx_http_grpc_module.c
+++ b/src/http/modules/ngx_http_grpc_module.c
@@ -30,6 +30,8 @@ typedef struct {
     ngx_array_t               *grpc_lengths;
     ngx_array_t               *grpc_values;
 
+    ngx_flag_t                 headers_inherit;
+
 #if (NGX_HTTP_SSL)
     ngx_uint_t                 ssl;
     ngx_uint_t                 ssl_protocols;
@@ -337,6 +339,13 @@ static ngx_command_t  ngx_http_grpc_commands[] = {
       offsetof(ngx_http_grpc_loc_conf_t, headers_source),
       NULL },
 
+    { ngx_string("grpc_set_header_inherit"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_FLAG,
+      ngx_conf_set_flag_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_grpc_loc_conf_t, headers_inherit),
+      NULL },
+
     { ngx_string("grpc_pass_header"),
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
       ngx_conf_set_str_array_slot,
@@ -4375,6 +4384,8 @@ ngx_http_grpc_create_loc_conf(ngx_conf_t *cf)
 
     conf->upstream.intercept_errors = NGX_CONF_UNSET;
 
+    conf->headers_inherit = NGX_CONF_UNSET;
+
 #if (NGX_HTTP_SSL)
     conf->upstream.ssl_session_reuse = NGX_CONF_UNSET;
     conf->upstream.ssl_name = NGX_CONF_UNSET_PTR;
@@ -4417,6 +4428,8 @@ ngx_http_grpc_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
     ngx_http_grpc_loc_conf_t *conf = child;
 
     ngx_int_t                  rc;
+    ngx_uint_t                 i;
+    ngx_keyval_t              *src, *h;
     ngx_hash_init_t            hash;
     ngx_http_core_loc_conf_t  *clcf;
 
@@ -4463,6 +4476,9 @@ ngx_http_grpc_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
     ngx_conf_merge_value(conf->upstream.intercept_errors,
                               prev->upstream.intercept_errors, 0);
 
+    ngx_conf_merge_value(conf->headers_inherit,
+                              prev->headers_inherit, 0);
+
 #if (NGX_HTTP_SSL)
 
     if (ngx_http_grpc_merge_ssl(cf, conf, prev) != NGX_OK) {
@@ -4546,6 +4562,24 @@ ngx_http_grpc_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
     if (conf->headers_source == prev->headers_source) {
         conf->headers = prev->headers;
         conf->host_set = prev->host_set;
+    } else if (conf->headers_source
+               && prev->headers_source
+               && prev->headers_source != NGX_CONF_UNSET_PTR)
+    {
+        src = prev->headers_source->elts;
+
+        for (i = 0; i < prev->headers_source->nelts; i++) {
+            if (!conf->headers_inherit) {
+                continue;
+            }
+
+            h = ngx_array_push(conf->headers_source);
+            if (h == NULL) {
+                return NGX_CONF_ERROR;
+            }
+
+            *h = src[i];
+        }
     }
 
     rc = ngx_http_grpc_init_headers(cf, conf, &conf->headers,
@@ -4622,6 +4656,12 @@ ngx_http_grpc_init_headers(ngx_conf_t *cf, ngx_http_grpc_loc_conf_t *conf,
                 conf->host_set = 1;
             }
 
+            if (src[i].key.len == 10
+                && ngx_strncasecmp(src[i].key.data, (u_char *) ":authority", 10) == 0)
+            {
+                conf->host_set = 1;
+            }
+
             s = ngx_array_push(&headers_merged);
             if (s == NULL) {
                 return NGX_ERROR;
diff --git a/src/http/modules/ngx_http_proxy_module.c b/src/http/modules/ngx_http_proxy_module.c
index 4eb6931..5995690 100644
--- a/src/http/modules/ngx_http_proxy_module.c
+++ b/src/http/modules/ngx_http_proxy_module.c
@@ -117,6 +117,8 @@ typedef struct {
     ngx_uint_t                     headers_hash_max_size;
     ngx_uint_t                     headers_hash_bucket_size;
 
+    ngx_flag_t                     headers_inherit;
+
 #if (NGX_HTTP_SSL)
     ngx_uint_t                     ssl;
     ngx_uint_t                     ssl_protocols;
@@ -415,6 +417,13 @@ static ngx_command_t  ngx_http_proxy_commands[] = {
       offsetof(ngx_http_proxy_loc_conf_t, headers_source),
       NULL },
 
+    { ngx_string("proxy_set_header_inherit"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_FLAG,
+      ngx_conf_set_flag_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_proxy_loc_conf_t, headers_inherit),
+      NULL },
+
     { ngx_string("proxy_headers_hash_max_size"),
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
       ngx_conf_set_num_slot,
@@ -543,6 +552,13 @@ static ngx_command_t  ngx_http_proxy_commands[] = {
       offsetof(ngx_http_proxy_loc_conf_t, upstream.cache_valid),
       NULL },
 
+    { ngx_string("proxy_cache_min_age"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_1MORE,
+      ngx_conf_set_sec_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_proxy_loc_conf_t, upstream.cache_min_age),
+      NULL },
+
     { ngx_string("proxy_cache_min_uses"),
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
       ngx_conf_set_num_slot,
@@ -564,6 +580,21 @@ static ngx_command_t  ngx_http_proxy_commands[] = {
       offsetof(ngx_http_proxy_loc_conf_t, upstream.cache_use_stale),
       &ngx_http_proxy_next_upstream_masks },
 
+    { ngx_string("proxy_cache_stale_if_error"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
+      ngx_conf_set_sec_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_proxy_loc_conf_t, upstream.cache_stale_if_error),
+      NULL },
+
+    { ngx_string("proxy_cache_stale_while_revalidate"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
+      ngx_conf_set_sec_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_proxy_loc_conf_t,
+                upstream.cache_stale_while_revalidate),
+      NULL },
+
     { ngx_string("proxy_cache_methods"),
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_1MORE,
       ngx_conf_set_bitmask_slot,
@@ -678,6 +709,13 @@ static ngx_command_t  ngx_http_proxy_commands[] = {
       offsetof(ngx_http_proxy_loc_conf_t, upstream.ignore_headers),
       &ngx_http_upstream_ignore_headers_masks },
 
+    { ngx_string("proxy_ignore_cache_control"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_1MORE,
+      ngx_conf_set_bitmask_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_proxy_loc_conf_t, upstream.ignore_cache_control),
+      &ngx_http_upstream_ignore_cache_control_masks },
+
     { ngx_string("proxy_http_version"),
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
       ngx_conf_set_enum_slot,
@@ -3325,6 +3363,7 @@ ngx_http_proxy_create_loc_conf(ngx_conf_t *cf)
      *
      *     conf->upstream.bufs.num = 0;
      *     conf->upstream.ignore_headers = 0;
+     *     conf->upstream.ignore_cache_control = 0;
      *     conf->upstream.next_upstream = 0;
      *     conf->upstream.cache_zone = NULL;
      *     conf->upstream.cache_use_stale = 0;
@@ -3382,7 +3421,10 @@ ngx_http_proxy_create_loc_conf(ngx_conf_t *cf)
 
 #if (NGX_HTTP_CACHE)
     conf->upstream.cache = NGX_CONF_UNSET;
+    conf->upstream.cache_min_age = NGX_CONF_UNSET_UINT;
     conf->upstream.cache_min_uses = NGX_CONF_UNSET_UINT;
+    conf->upstream.cache_stale_if_error = NGX_CONF_UNSET_UINT;
+    conf->upstream.cache_stale_while_revalidate = NGX_CONF_UNSET_UINT;
     conf->upstream.cache_max_range_offset = NGX_CONF_UNSET;
     conf->upstream.cache_bypass = NGX_CONF_UNSET_PTR;
     conf->upstream.no_cache = NGX_CONF_UNSET_PTR;
@@ -3400,6 +3442,8 @@ ngx_http_proxy_create_loc_conf(ngx_conf_t *cf)
 
     conf->upstream.intercept_errors = NGX_CONF_UNSET;
 
+    conf->headers_inherit = NGX_CONF_UNSET;
+
 #if (NGX_HTTP_SSL)
     conf->upstream.ssl_session_reuse = NGX_CONF_UNSET;
     conf->upstream.ssl_name = NGX_CONF_UNSET_PTR;
@@ -3447,6 +3491,8 @@ ngx_http_proxy_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
     u_char                     *p;
     size_t                      size;
     ngx_int_t                   rc;
+    ngx_uint_t                  i;
+    ngx_keyval_t               *src, *h;
     ngx_hash_init_t             hash;
     ngx_http_core_loc_conf_t   *clcf;
     ngx_http_proxy_rewrite_t   *pr;
@@ -3613,6 +3659,9 @@ ngx_http_proxy_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
                               prev->upstream.ignore_headers,
                               NGX_CONF_BITMASK_SET);
 
+    ngx_conf_merge_bitmask_value(conf->upstream.ignore_cache_control,
+                              prev->upstream.ignore_cache_control,
+                              NGX_CONF_BITMASK_SET);
 
     ngx_conf_merge_bitmask_value(conf->upstream.next_upstream,
                               prev->upstream.next_upstream,
@@ -3656,6 +3705,9 @@ ngx_http_proxy_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
         return NGX_CONF_ERROR;
     }
 
+    ngx_conf_merge_sec_value(conf->upstream.cache_min_age,
+                              prev->upstream.cache_min_age, 0);
+
     ngx_conf_merge_uint_value(conf->upstream.cache_min_uses,
                               prev->upstream.cache_min_uses, 1);
 
@@ -3677,6 +3729,12 @@ ngx_http_proxy_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
         conf->upstream.cache_use_stale |= NGX_HTTP_UPSTREAM_FT_NOLIVE;
     }
 
+    ngx_conf_merge_sec_value(conf->upstream.cache_stale_if_error,
+                              prev->upstream.cache_stale_if_error, 0);
+    ngx_conf_merge_sec_value(conf->upstream.cache_stale_while_revalidate,
+                              prev->upstream.cache_stale_while_revalidate,
+                              0);
+
     if (conf->upstream.cache_methods == 0) {
         conf->upstream.cache_methods = prev->upstream.cache_methods;
     }
@@ -3724,6 +3782,9 @@ ngx_http_proxy_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
     ngx_conf_merge_value(conf->upstream.intercept_errors,
                               prev->upstream.intercept_errors, 0);
 
+    ngx_conf_merge_value(conf->headers_inherit,
+                              prev->headers_inherit, 0);
+
 #if (NGX_HTTP_SSL)
 
     if (ngx_http_proxy_merge_ssl(cf, conf, prev) != NGX_OK) {
@@ -3905,6 +3966,24 @@ ngx_http_proxy_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
 #if (NGX_HTTP_CACHE)
         conf->headers_cache = prev->headers_cache;
 #endif
+    } else if (conf->headers_source
+               && prev->headers_source
+               && prev->headers_source != NGX_CONF_UNSET_PTR)
+    {
+        src = prev->headers_source->elts;
+
+        for (i = 0; i < prev->headers_source->nelts; i++) {
+            if (!conf->headers_inherit) {
+                continue;
+            }
+
+            h = ngx_array_push(conf->headers_source);
+            if (h == NULL) {
+                return NGX_CONF_ERROR;
+            }
+
+            *h = src[i];
+        }
     }
 
     rc = ngx_http_proxy_init_headers(cf, conf, &conf->headers,
diff --git a/src/http/modules/ngx_http_scgi_module.c b/src/http/modules/ngx_http_scgi_module.c
index 3acea87..433f4c9 100644
--- a/src/http/modules/ngx_http_scgi_module.c
+++ b/src/http/modules/ngx_http_scgi_module.c
@@ -272,6 +272,13 @@ static ngx_command_t ngx_http_scgi_commands[] = {
       offsetof(ngx_http_scgi_loc_conf_t, upstream.cache_valid),
       NULL },
 
+    { ngx_string("scgi_cache_min_age"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_1MORE,
+      ngx_conf_set_sec_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_scgi_loc_conf_t, upstream.cache_min_age),
+      NULL },
+
     { ngx_string("scgi_cache_min_uses"),
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
       ngx_conf_set_num_slot,
@@ -293,6 +300,21 @@ static ngx_command_t ngx_http_scgi_commands[] = {
       offsetof(ngx_http_scgi_loc_conf_t, upstream.cache_use_stale),
       &ngx_http_scgi_next_upstream_masks },
 
+    { ngx_string("scgi_cache_stale_if_error"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
+      ngx_conf_set_sec_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_scgi_loc_conf_t, upstream.cache_stale_if_error),
+      NULL },
+
+    { ngx_string("scgi_cache_stale_while_revalidate"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
+      ngx_conf_set_sec_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_scgi_loc_conf_t,
+                upstream.cache_stale_while_revalidate),
+      NULL },
+
     { ngx_string("scgi_cache_methods"),
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_1MORE,
       ngx_conf_set_bitmask_slot,
@@ -407,6 +429,13 @@ static ngx_command_t ngx_http_scgi_commands[] = {
       offsetof(ngx_http_scgi_loc_conf_t, upstream.ignore_headers),
       &ngx_http_upstream_ignore_headers_masks },
 
+    { ngx_string("scgi_ignore_cache_control"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_1MORE,
+      ngx_conf_set_bitmask_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_scgi_loc_conf_t, upstream.ignore_cache_control),
+      &ngx_http_upstream_ignore_cache_control_masks },
+
       ngx_null_command
 };
 
@@ -1312,7 +1341,10 @@ ngx_http_scgi_create_loc_conf(ngx_conf_t *cf)
 
 #if (NGX_HTTP_CACHE)
     conf->upstream.cache = NGX_CONF_UNSET;
+    conf->upstream.cache_min_age = NGX_CONF_UNSET_UINT;
     conf->upstream.cache_min_uses = NGX_CONF_UNSET_UINT;
+    conf->upstream.cache_stale_if_error = NGX_CONF_UNSET_UINT;
+    conf->upstream.cache_stale_while_revalidate = NGX_CONF_UNSET_UINT;
     conf->upstream.cache_max_range_offset = NGX_CONF_UNSET;
     conf->upstream.cache_bypass = NGX_CONF_UNSET_PTR;
     conf->upstream.no_cache = NGX_CONF_UNSET_PTR;
@@ -1513,6 +1545,9 @@ ngx_http_scgi_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
                                  prev->upstream.ignore_headers,
                                  NGX_CONF_BITMASK_SET);
 
+    ngx_conf_merge_bitmask_value(conf->upstream.ignore_cache_control,
+                              prev->upstream.ignore_cache_control,
+                              NGX_CONF_BITMASK_SET);
 
     ngx_conf_merge_bitmask_value(conf->upstream.next_upstream,
                                  prev->upstream.next_upstream,
@@ -1555,6 +1590,9 @@ ngx_http_scgi_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
         return NGX_CONF_ERROR;
     }
 
+    ngx_conf_merge_sec_value(conf->upstream.cache_min_age,
+                              prev->upstream.cache_min_age, 0);
+
     ngx_conf_merge_uint_value(conf->upstream.cache_min_uses,
                               prev->upstream.cache_min_uses, 1);
 
@@ -1576,6 +1614,12 @@ ngx_http_scgi_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
         conf->upstream.cache_use_stale |= NGX_HTTP_UPSTREAM_FT_NOLIVE;
     }
 
+    ngx_conf_merge_sec_value(conf->upstream.cache_stale_if_error,
+                              prev->upstream.cache_stale_if_error, 0);
+    ngx_conf_merge_sec_value(conf->upstream.cache_stale_while_revalidate,
+                              prev->upstream.cache_stale_while_revalidate,
+                              0);
+
     if (conf->upstream.cache_methods == 0) {
         conf->upstream.cache_methods = prev->upstream.cache_methods;
     }
diff --git a/src/http/modules/ngx_http_uwsgi_module.c b/src/http/modules/ngx_http_uwsgi_module.c
index c1731ff..7c38ab7 100644
--- a/src/http/modules/ngx_http_uwsgi_module.c
+++ b/src/http/modules/ngx_http_uwsgi_module.c
@@ -338,6 +338,13 @@ static ngx_command_t ngx_http_uwsgi_commands[] = {
       offsetof(ngx_http_uwsgi_loc_conf_t, upstream.cache_valid),
       NULL },
 
+    { ngx_string("uwsgi_cache_min_age"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_1MORE,
+      ngx_conf_set_sec_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_uwsgi_loc_conf_t, upstream.cache_min_age),
+      NULL },
+
     { ngx_string("uwsgi_cache_min_uses"),
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
       ngx_conf_set_num_slot,
@@ -359,6 +366,21 @@ static ngx_command_t ngx_http_uwsgi_commands[] = {
       offsetof(ngx_http_uwsgi_loc_conf_t, upstream.cache_use_stale),
       &ngx_http_uwsgi_next_upstream_masks },
 
+    { ngx_string("uwsgi_cache_stale_if_error"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
+      ngx_conf_set_sec_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_uwsgi_loc_conf_t, upstream.cache_stale_if_error),
+      NULL },
+
+    { ngx_string("uwsgi_cache_stale_while_revalidate"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
+      ngx_conf_set_sec_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_uwsgi_loc_conf_t,
+                upstream.cache_stale_while_revalidate),
+      NULL },
+
     { ngx_string("uwsgi_cache_methods"),
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_1MORE,
       ngx_conf_set_bitmask_slot,
@@ -480,6 +502,13 @@ static ngx_command_t ngx_http_uwsgi_commands[] = {
       offsetof(ngx_http_uwsgi_loc_conf_t, upstream.ignore_headers),
       &ngx_http_upstream_ignore_headers_masks },
 
+    { ngx_string("uwsgi_ignore_cache_control"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_1MORE,
+      ngx_conf_set_bitmask_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_uwsgi_loc_conf_t, upstream.ignore_cache_control),
+      &ngx_http_upstream_ignore_cache_control_masks },
+
 #if (NGX_HTTP_SSL)
 
     { ngx_string("uwsgi_ssl_session_reuse"),
@@ -1543,7 +1572,10 @@ ngx_http_uwsgi_create_loc_conf(ngx_conf_t *cf)
 
 #if (NGX_HTTP_CACHE)
     conf->upstream.cache = NGX_CONF_UNSET;
+    conf->upstream.cache_min_age = NGX_CONF_UNSET_UINT;
     conf->upstream.cache_min_uses = NGX_CONF_UNSET_UINT;
+    conf->upstream.cache_stale_if_error = NGX_CONF_UNSET_UINT;
+    conf->upstream.cache_stale_while_revalidate = NGX_CONF_UNSET_UINT;
     conf->upstream.cache_max_range_offset = NGX_CONF_UNSET;
     conf->upstream.cache_bypass = NGX_CONF_UNSET_PTR;
     conf->upstream.no_cache = NGX_CONF_UNSET_PTR;
@@ -1756,6 +1788,9 @@ ngx_http_uwsgi_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
                                  prev->upstream.ignore_headers,
                                  NGX_CONF_BITMASK_SET);
 
+    ngx_conf_merge_bitmask_value(conf->upstream.ignore_cache_control,
+                              prev->upstream.ignore_cache_control,
+                              NGX_CONF_BITMASK_SET);
 
     ngx_conf_merge_bitmask_value(conf->upstream.next_upstream,
                                  prev->upstream.next_upstream,
@@ -1798,6 +1833,9 @@ ngx_http_uwsgi_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
         return NGX_CONF_ERROR;
     }
 
+    ngx_conf_merge_sec_value(conf->upstream.cache_min_age,
+                              prev->upstream.cache_min_age, 0);
+
     ngx_conf_merge_uint_value(conf->upstream.cache_min_uses,
                               prev->upstream.cache_min_uses, 1);
 
@@ -1819,6 +1857,12 @@ ngx_http_uwsgi_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
         conf->upstream.cache_use_stale |= NGX_HTTP_UPSTREAM_FT_NOLIVE;
     }
 
+    ngx_conf_merge_sec_value(conf->upstream.cache_stale_if_error,
+                              prev->upstream.cache_stale_if_error, 0);
+    ngx_conf_merge_sec_value(conf->upstream.cache_stale_while_revalidate,
+                              prev->upstream.cache_stale_while_revalidate,
+                              0);
+
     if (conf->upstream.cache_methods == 0) {
         conf->upstream.cache_methods = prev->upstream.cache_methods;
     }
diff --git a/src/http/ngx_http_upstream.c b/src/http/ngx_http_upstream.c
index 2be233c..7675308 100644
--- a/src/http/ngx_http_upstream.c
+++ b/src/http/ngx_http_upstream.c
@@ -165,6 +165,10 @@ static ngx_int_t ngx_http_upstream_trailer_variable(ngx_http_request_t *r,
     ngx_http_variable_value_t *v, uintptr_t data);
 static ngx_int_t ngx_http_upstream_cookie_variable(ngx_http_request_t *r,
     ngx_http_variable_value_t *v, uintptr_t data);
+static ngx_int_t ngx_http_upstream_ignore_headers_variable(ngx_http_request_t *r,
+    ngx_http_variable_value_t *v, uintptr_t data);
+static ngx_int_t ngx_http_upstream_ignore_cache_control_variable(ngx_http_request_t *r,
+    ngx_http_variable_value_t *v, uintptr_t data);
 
 static char *ngx_http_upstream(ngx_conf_t *cf, ngx_command_t *cmd, void *dummy);
 static char *ngx_http_upstream_server(ngx_conf_t *cf, ngx_command_t *cmd,
@@ -433,6 +437,86 @@ static ngx_http_variable_t  ngx_http_upstream_vars[] = {
     { ngx_string("upstream_cookie_"), NULL, ngx_http_upstream_cookie_variable,
       0, NGX_HTTP_VAR_NOCACHEABLE|NGX_HTTP_VAR_PREFIX, 0 },
 
+    { ngx_string("upstream_ignore_x_accel_redirect"), NULL,
+      ngx_http_upstream_ignore_headers_variable,
+      NGX_HTTP_UPSTREAM_IGN_XA_REDIRECT,
+      NGX_HTTP_VAR_NOCACHEABLE, 0 },
+
+    { ngx_string("upstream_ignore_x_accel_expires"), NULL,
+      ngx_http_upstream_ignore_headers_variable,
+      NGX_HTTP_UPSTREAM_IGN_XA_EXPIRES,
+      NGX_HTTP_VAR_NOCACHEABLE, 0 },
+
+    { ngx_string("upstream_ignore_expires"), NULL,
+      ngx_http_upstream_ignore_headers_variable,
+      NGX_HTTP_UPSTREAM_IGN_EXPIRES,
+      NGX_HTTP_VAR_NOCACHEABLE, 0 },
+
+    { ngx_string("upstream_ignore_cache_control"), NULL,
+      ngx_http_upstream_ignore_headers_variable,
+      NGX_HTTP_UPSTREAM_IGN_CACHE_CONTROL,
+      NGX_HTTP_VAR_NOCACHEABLE, 0 },
+
+    { ngx_string("upstream_ignore_set_cookie"), NULL,
+      ngx_http_upstream_ignore_headers_variable,
+      NGX_HTTP_UPSTREAM_IGN_SET_COOKIE,
+      NGX_HTTP_VAR_NOCACHEABLE, 0 },
+
+    { ngx_string("upstream_ignore_x_accel_limit_rate"), NULL,
+      ngx_http_upstream_ignore_headers_variable,
+      NGX_HTTP_UPSTREAM_IGN_XA_LIMIT_RATE,
+      NGX_HTTP_VAR_NOCACHEABLE, 0 },
+
+    { ngx_string("upstream_ignore_x_accel_buffering"), NULL,
+      ngx_http_upstream_ignore_headers_variable,
+      NGX_HTTP_UPSTREAM_IGN_XA_BUFFERING,
+      NGX_HTTP_VAR_NOCACHEABLE, 0 },
+
+    { ngx_string("upstream_ignore_x_accel_charset"), NULL,
+      ngx_http_upstream_ignore_headers_variable,
+      NGX_HTTP_UPSTREAM_IGN_XA_CHARSET,
+      NGX_HTTP_VAR_NOCACHEABLE, 0 },
+
+    { ngx_string("upstream_ignore_vary"), NULL,
+      ngx_http_upstream_ignore_headers_variable,
+      NGX_HTTP_UPSTREAM_IGN_VARY,
+      NGX_HTTP_VAR_NOCACHEABLE, 0 },
+
+    { ngx_string("upstream_ignore_no_cache"), NULL,
+      ngx_http_upstream_ignore_cache_control_variable,
+      NGX_HTTP_UPSTREAM_IGN_CC_NOCACHE,
+      NGX_HTTP_VAR_NOCACHEABLE, 0 },
+
+    { ngx_string("upstream_ignore_no_store"), NULL,
+      ngx_http_upstream_ignore_cache_control_variable,
+      NGX_HTTP_UPSTREAM_IGN_CC_NOSTORE,
+      NGX_HTTP_VAR_NOCACHEABLE, 0 },
+
+    { ngx_string("upstream_ignore_private"), NULL,
+      ngx_http_upstream_ignore_cache_control_variable,
+      NGX_HTTP_UPSTREAM_IGN_CC_PRIVATE,
+      NGX_HTTP_VAR_NOCACHEABLE, 0 },
+
+    { ngx_string("upstream_ignore_max_age"), NULL,
+      ngx_http_upstream_ignore_cache_control_variable,
+      NGX_HTTP_UPSTREAM_IGN_CC_MAXAGE,
+      NGX_HTTP_VAR_NOCACHEABLE, 0 },
+
+    { ngx_string("upstream_ignore_s_maxage"), NULL,
+      ngx_http_upstream_ignore_cache_control_variable,
+      NGX_HTTP_UPSTREAM_IGN_CC_SMAXAGE,
+      NGX_HTTP_VAR_NOCACHEABLE, 0 },
+
+    { ngx_string("upstream_ignore_stale_if_error"), NULL,
+      ngx_http_upstream_ignore_cache_control_variable,
+      NGX_HTTP_UPSTREAM_IGN_CC_STALE_WR,
+      NGX_HTTP_VAR_NOCACHEABLE, 0 },
+
+    { ngx_string("upstream_ignore_stale_while_revalidate"), NULL,
+      ngx_http_upstream_ignore_cache_control_variable,
+      NGX_HTTP_UPSTREAM_IGN_CC_STALE_IE,
+      NGX_HTTP_VAR_NOCACHEABLE, 0 },
+
       ngx_http_null_variable
 };
 
@@ -471,6 +555,18 @@ ngx_conf_bitmask_t  ngx_http_upstream_ignore_headers_masks[] = {
 };
 
 
+ngx_conf_bitmask_t  ngx_http_upstream_ignore_cache_control_masks[] = {
+    { ngx_string("no-cache"), NGX_HTTP_UPSTREAM_IGN_CC_NOCACHE },
+    { ngx_string("no-store"), NGX_HTTP_UPSTREAM_IGN_CC_NOSTORE },
+    { ngx_string("private"), NGX_HTTP_UPSTREAM_IGN_CC_PRIVATE },
+    { ngx_string("max-age"), NGX_HTTP_UPSTREAM_IGN_CC_MAXAGE },
+    { ngx_string("s-maxage"), NGX_HTTP_UPSTREAM_IGN_CC_SMAXAGE },
+    { ngx_string("stale-while-revalidate"), NGX_HTTP_UPSTREAM_IGN_CC_STALE_WR },
+    { ngx_string("stale-if-error"), NGX_HTTP_UPSTREAM_IGN_CC_STALE_IE },
+    { ngx_null_string, 0 }
+};
+
+
 ngx_int_t
 ngx_http_upstream_create(ngx_http_request_t *r)
 {
@@ -4840,21 +4936,30 @@ ngx_http_upstream_process_cache_control(ngx_http_request_t *r,
         goto extensions;
     }
 
-    if (ngx_strlcasestrn(start, last, (u_char *) "no-cache", 8 - 1) != NULL
-        || ngx_strlcasestrn(start, last, (u_char *) "no-store", 8 - 1) != NULL
-        || ngx_strlcasestrn(start, last, (u_char *) "private", 7 - 1) != NULL)
+    if ((ngx_strlcasestrn(start, last, (u_char *) "no-cache", 8 - 1) != NULL 
+            && !(u->conf->ignore_cache_control & NGX_HTTP_UPSTREAM_IGN_CC_NOCACHE))
+        || (ngx_strlcasestrn(start, last, (u_char *) "no-store", 8 - 1) != NULL
+            && !(u->conf->ignore_cache_control & NGX_HTTP_UPSTREAM_IGN_CC_NOSTORE))
+        || (ngx_strlcasestrn(start, last, (u_char *) "private", 7 - 1) != NULL
+            && !(u->conf->ignore_cache_control & NGX_HTTP_UPSTREAM_IGN_CC_PRIVATE)))
     {
         u->headers_in.no_cache = 1;
         return NGX_OK;
     }
 
     p = ngx_strlcasestrn(start, last, (u_char *) "s-maxage=", 9 - 1);
-    offset = 9;
-
-    if (p == NULL) {
-        p = ngx_strlcasestrn(start, last, (u_char *) "max-age=", 8 - 1);
+    if (p && !(u->conf->ignore_cache_control & NGX_HTTP_UPSTREAM_IGN_CC_SMAXAGE))
+    {
+        offset = 9;
+    }
+    else if ((p = ngx_strlcasestrn(start, last, (u_char *) "max-age=", 7))
+        && !(u->conf->ignore_cache_control & NGX_HTTP_UPSTREAM_IGN_CC_MAXAGE))
+    {
         offset = 8;
     }
+    else {
+        p = NULL;
+    }
 
     if (p) {
         n = 0;
@@ -4878,7 +4983,11 @@ ngx_http_upstream_process_cache_control(ngx_http_request_t *r,
             return NGX_OK;
         }
 
-        r->cache->valid_sec = ngx_time() + n;
+        if (u->conf->cache_min_age > n) {
+            r->cache->valid_sec = ngx_time() + u->conf->cache_min_age;
+        } else {
+            r->cache->valid_sec = ngx_time() + n;
+        }
         u->headers_in.expired = 0;
     }
 
@@ -4887,7 +4996,7 @@ extensions:
     p = ngx_strlcasestrn(start, last, (u_char *) "stale-while-revalidate=",
                          23 - 1);
 
-    if (p) {
+    if (p && !(u->conf->ignore_cache_control & NGX_HTTP_UPSTREAM_IGN_CC_STALE_WR)) {
         n = 0;
 
         for (p += 23; p < last; p++) {
@@ -4906,11 +5015,14 @@ extensions:
 
         r->cache->updating_sec = n;
         r->cache->error_sec = n;
+    } else if (u->conf->cache_stale_while_revalidate > 0) {
+        r->cache->updating_sec = u->conf->cache_stale_while_revalidate;
+        r->cache->error_sec = u->conf->cache_stale_while_revalidate;
     }
 
     p = ngx_strlcasestrn(start, last, (u_char *) "stale-if-error=", 15 - 1);
 
-    if (p) {
+    if (p && !(u->conf->ignore_cache_control & NGX_HTTP_UPSTREAM_IGN_CC_STALE_IE)) {
         n = 0;
 
         for (p += 15; p < last; p++) {
@@ -4928,6 +5040,8 @@ extensions:
         }
 
         r->cache->error_sec = n;
+    } else if (u->conf->cache_stale_if_error > 0) {
+        r->cache->error_sec = u->conf->cache_stale_if_error;
     }
     }
 #endif
@@ -5960,6 +6074,54 @@ ngx_http_upstream_cookie_variable(ngx_http_request_t *r,
 }
 
 
+static ngx_int_t
+ngx_http_upstream_ignore_headers_variable(ngx_http_request_t *r,
+    ngx_http_variable_value_t *v, uintptr_t data)
+{
+    if (r->upstream == NULL || r->upstream->conf == NULL) {
+        v->not_found = 1;
+        return NGX_OK;
+    }
+
+    if (r->upstream->conf->ignore_headers & data) {
+        v->data = (u_char *) "1";
+    } else {
+        v->data = (u_char *) "0";
+    }
+
+    v->len = 1;
+    v->valid = 1;
+    v->no_cacheable = 0;
+    v->not_found = 0;
+
+    return NGX_OK;
+}
+
+
+static ngx_int_t
+ngx_http_upstream_ignore_cache_control_variable(ngx_http_request_t *r,
+    ngx_http_variable_value_t *v, uintptr_t data)
+{
+    if (r->upstream == NULL || r->upstream->conf == NULL) {
+        v->not_found = 1;
+        return NGX_OK;
+    }
+
+    if (r->upstream->conf->ignore_cache_control & data) {
+        v->data = (u_char *) "1";
+    } else {
+        v->data = (u_char *) "0";
+    }
+
+    v->len = 1;
+    v->valid = 1;
+    v->no_cacheable = 0;
+    v->not_found = 0;
+
+    return NGX_OK;
+}
+
+
 #if (NGX_HTTP_CACHE)
 
 static ngx_int_t
diff --git a/src/http/ngx_http_upstream.h b/src/http/ngx_http_upstream.h
index 15a35d9..27f51d5 100644
--- a/src/http/ngx_http_upstream.h
+++ b/src/http/ngx_http_upstream.h
@@ -56,6 +56,15 @@
 #define NGX_HTTP_UPSTREAM_IGN_VARY           0x00000200
 
 
+#define NGX_HTTP_UPSTREAM_IGN_CC_NOCACHE     0x00000002
+#define NGX_HTTP_UPSTREAM_IGN_CC_NOSTORE     0x00000004
+#define NGX_HTTP_UPSTREAM_IGN_CC_PRIVATE     0x00000008
+#define NGX_HTTP_UPSTREAM_IGN_CC_MAXAGE      0x00000010
+#define NGX_HTTP_UPSTREAM_IGN_CC_SMAXAGE     0x00000020
+#define NGX_HTTP_UPSTREAM_IGN_CC_STALE_WR    0x00000040
+#define NGX_HTTP_UPSTREAM_IGN_CC_STALE_IE    0x00000080
+
+
 typedef struct {
     ngx_uint_t                       status;
     ngx_msec_t                       response_time;
@@ -169,6 +178,7 @@ typedef struct {
     ngx_bufs_t                       bufs;
 
     ngx_uint_t                       ignore_headers;
+    ngx_uint_t                       ignore_cache_control;
     ngx_uint_t                       next_upstream;
     ngx_uint_t                       store_access;
     ngx_uint_t                       next_upstream_tries;
@@ -195,8 +205,11 @@ typedef struct {
     ngx_shm_zone_t                  *cache_zone;
     ngx_http_complex_value_t        *cache_value;
 
+    time_t                           cache_min_age;
     ngx_uint_t                       cache_min_uses;
     ngx_uint_t                       cache_use_stale;
+    time_t                           cache_stale_if_error;
+    time_t                           cache_stale_while_revalidate;
     ngx_uint_t                       cache_methods;
 
     off_t                            cache_max_range_offset;
@@ -442,7 +455,7 @@ ngx_int_t ngx_http_upstream_hide_headers_hash(ngx_conf_t *cf,
 extern ngx_module_t        ngx_http_upstream_module;
 extern ngx_conf_bitmask_t  ngx_http_upstream_cache_method_mask[];
 extern ngx_conf_bitmask_t  ngx_http_upstream_ignore_headers_masks[];
-
+extern ngx_conf_bitmask_t  ngx_http_upstream_ignore_cache_control_masks[];
 
 #ifndef HAVE_BALANCER_STATUS_CODE_PATCH
 #define HAVE_BALANCER_STATUS_CODE_PATCH
