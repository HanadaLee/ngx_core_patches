diff --git a/src/http/modules/ngx_http_sub_filter_module.c b/src/http/modules/ngx_http_sub_filter_module.c
index 6d3de59..623e64c 100644
--- a/src/http/modules/ngx_http_sub_filter_module.c
+++ b/src/http/modules/ngx_http_sub_filter_module.c
@@ -43,6 +43,7 @@ typedef struct {
     ngx_flag_t                 once;
     ngx_flag_t                 last_modified;
 
+    ngx_array_t               *bypass;
     ngx_array_t               *types_keys;
     ngx_array_t               *matches;
 } ngx_http_sub_loc_conf_t;
@@ -107,6 +108,13 @@ static ngx_command_t  ngx_http_sub_filter_commands[] = {
       0,
       NULL },
 
+    { ngx_string("sub_filter_bypass"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_1MORE,
+      ngx_http_set_predicate_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_sub_loc_conf_t, bypass),
+      NULL },
+
     { ngx_string("sub_filter_types"),
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_1MORE,
       ngx_http_types_slot,
@@ -186,6 +194,18 @@ ngx_http_sub_header_filter(ngx_http_request_t *r)
         return ngx_http_next_header_filter(r);
     }
 
+    switch (ngx_http_test_predicates(r, slcf->bypass)) {
+
+    case NGX_ERROR:
+        return NGX_ERROR;
+
+    case NGX_DECLINED:
+        return ngx_http_next_header_filter(r);
+
+    default: /* NGX_OK */
+        break;
+    }
+
     ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_sub_ctx_t));
     if (ctx == NULL) {
         return NGX_ERROR;
