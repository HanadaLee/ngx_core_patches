diff --git a/src/http/modules/ngx_http_rewrite_module.c b/src/http/modules/ngx_http_rewrite_module.c
index 0e6d4df..6da0009 100644
--- a/src/http/modules/ngx_http_rewrite_module.c
+++ b/src/http/modules/ngx_http_rewrite_module.c
@@ -39,6 +39,10 @@ static char *ngx_http_rewrite_set(ngx_conf_t *cf, ngx_command_t *cmd,
     void *conf);
 static char * ngx_http_rewrite_value(ngx_conf_t *cf,
     ngx_http_rewrite_loc_conf_t *lcf, ngx_str_t *value);
+static char *
+ngx_http_rewrite_if_extend(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);
+static char *
+ngx_http_rewrite_if_condition_extend(ngx_conf_t *cf, ngx_http_rewrite_loc_conf_t *lcf);
 
 
 static ngx_command_t  ngx_http_rewrite_commands[] = {
@@ -74,6 +78,24 @@ static ngx_command_t  ngx_http_rewrite_commands[] = {
       0,
       NULL },
 
+    {
+        ngx_string("if_all"),
+        NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_BLOCK|NGX_CONF_1MORE,
+        ngx_http_rewrite_if_extend,
+        NGX_HTTP_LOC_CONF_OFFSET,
+        0,
+        NULL
+    },
+
+    {
+        ngx_string("if_any"),
+        NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_BLOCK|NGX_CONF_1MORE,
+        ngx_http_rewrite_if_extend,
+        NGX_HTTP_LOC_CONF_OFFSET,
+        0,
+        NULL
+    },
+
     { ngx_string("set"),
       NGX_HTTP_SRV_CONF|NGX_HTTP_SIF_CONF|NGX_HTTP_LOC_CONF|NGX_HTTP_LIF_CONF
                        |NGX_CONF_TAKE2,
@@ -781,6 +803,80 @@ ngx_http_rewrite_if_condition(ngx_conf_t *cf, ngx_http_rewrite_loc_conf_t *lcf)
             return NGX_CONF_OK;
         }
 
+        if (len == 1 && p[0] == '>') {
+
+            if (ngx_http_rewrite_value(cf, lcf, &value[last]) != NGX_CONF_OK) {
+                return NGX_CONF_ERROR;
+            }
+
+            code = ngx_http_script_start_code(cf->pool, &lcf->codes,
+                    sizeof(uintptr_t));
+
+            if (code == NULL) {
+                return NGX_CONF_ERROR;
+            }
+
+            *code = ngx_http_script_greater_than_code;
+
+            return NGX_CONF_OK;
+
+        }
+
+        if (len == 1 && p[0] == '<') {
+
+            if (ngx_http_rewrite_value(cf, lcf, &value[last]) != NGX_CONF_OK) {
+                return NGX_CONF_ERROR;
+            }
+
+            code = ngx_http_script_start_code(cf->pool, &lcf->codes,
+                    sizeof(uintptr_t));
+
+            if (code == NULL) {
+                return NGX_CONF_ERROR;
+            }
+
+            *code = ngx_http_script_less_than_code;
+
+            return NGX_CONF_OK;
+        }
+
+        if (len == 2 && ((p[0] == '!' && p[1] == '<')
+                || (p[0] == '>' && p[1] == '='))) {
+
+            if (ngx_http_rewrite_value(cf, lcf, &value[last]) != NGX_CONF_OK) {
+                return NGX_CONF_ERROR;
+            }
+
+            code = ngx_http_script_start_code(cf->pool, &lcf->codes,
+                    sizeof(uintptr_t));
+
+            if (code == NULL) {
+                return NGX_CONF_ERROR;
+            }
+
+            *code = ngx_http_script_greater_equal_code;
+            return NGX_CONF_OK;
+        }
+
+        if (len == 2 && ((p[0] == '!' && p[1] == '>')
+                || (p[0] == '<' && p[1] == '='))) {
+
+            if (ngx_http_rewrite_value(cf, lcf, &value[last]) != NGX_CONF_OK) {
+                return NGX_CONF_ERROR;
+            }
+
+            code = ngx_http_script_start_code(cf->pool, &lcf->codes,
+                    sizeof(uintptr_t));
+
+            if (code == NULL) {
+                return NGX_CONF_ERROR;
+            }
+
+            *code = ngx_http_script_less_equal_code;
+
+            return NGX_CONF_OK;
+        }
+
         ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                            "unexpected \"%V\" in condition", &value[cur]);
         return NGX_CONF_ERROR;
@@ -1017,3 +1113,487 @@ ngx_http_rewrite_value(ngx_conf_t *cf, ngx_http_rewrite_loc_conf_t *lcf,
 
     return NGX_CONF_OK;
 }
+
+
+static char *
+ngx_http_rewrite_if_extend(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
+{
+    ngx_http_rewrite_loc_conf_t  *lcf = conf;
+
+    void                         *mconf;
+    char                         *rv;
+    u_char                       *elts;
+    ngx_uint_t                    i;
+    ngx_conf_t                    save;
+    ngx_http_module_t            *module;
+    ngx_http_conf_ctx_t          *ctx, *pctx;
+    ngx_http_core_loc_conf_t     *clcf, *pclcf;
+    ngx_http_script_if_code_t    *if_code;
+    ngx_http_rewrite_loc_conf_t  *nlcf;
+
+    ctx = ngx_pcalloc(cf->pool, sizeof(ngx_http_conf_ctx_t));
+
+    if (ctx == NULL) {
+        return NGX_CONF_ERROR;
+    }
+
+    pctx = cf->ctx;
+    ctx->main_conf = pctx->main_conf;
+    ctx->srv_conf = pctx->srv_conf;
+
+    ctx->loc_conf = ngx_pcalloc(cf->pool, sizeof(void *) * ngx_http_max_module);
+
+    if (ctx->loc_conf == NULL) {
+        return NGX_CONF_ERROR;
+    }
+
+    for (i = 0; ngx_modules[i]; i++) {
+        if (ngx_modules[i]->type != NGX_HTTP_MODULE) {
+            continue;
+        }
+
+        module = ngx_modules[i]->ctx;
+
+        if (module->create_loc_conf) {
+
+            mconf = module->create_loc_conf(cf);
+
+            if (mconf == NULL) {
+                return NGX_CONF_ERROR;
+            }
+
+            ctx->loc_conf[ngx_modules[i]->ctx_index] = mconf;
+        }
+    }
+
+    pclcf = pctx->loc_conf[ngx_http_core_module.ctx_index];
+
+    clcf = ctx->loc_conf[ngx_http_core_module.ctx_index];
+    clcf->loc_conf = ctx->loc_conf;
+    clcf->name = pclcf->name;
+    clcf->noname = 1;
+
+    if (ngx_http_add_location(cf, &pclcf->locations, clcf) != NGX_OK) {
+        return NGX_CONF_ERROR;
+    }
+
+    if (ngx_http_rewrite_if_condition_extend(cf, lcf) != NGX_CONF_OK) {
+        return NGX_CONF_ERROR;
+    }
+
+    if_code = ngx_array_push_n(lcf->codes, sizeof(ngx_http_script_if_code_t));
+
+    if (if_code == NULL) {
+        return NGX_CONF_ERROR;
+    }
+
+    if_code->code = ngx_http_script_if_code;
+
+    elts = lcf->codes->elts;
+
+
+    /* the inner directives must be compiled to the same code array */
+
+    nlcf = ctx->loc_conf[ngx_http_rewrite_module.ctx_index];
+    nlcf->codes = lcf->codes;
+
+
+    save = *cf;
+    cf->ctx = ctx;
+
+    if (pclcf->name.len == 0) {
+        if_code->loc_conf = NULL;
+        cf->cmd_type = NGX_HTTP_SIF_CONF;
+
+    } else {
+        if_code->loc_conf = ctx->loc_conf;
+        cf->cmd_type = NGX_HTTP_LIF_CONF;
+    }
+
+    rv = ngx_conf_parse(cf, NULL);
+
+    *cf = save;
+
+    if (rv != NGX_CONF_OK) {
+        return rv;
+    }
+
+
+    if (elts != lcf->codes->elts) {
+        if_code = (ngx_http_script_if_code_t *)
+                ((u_char *) if_code + ((u_char *) lcf->codes->elts - elts));
+    }
+
+    if_code->next = (u_char *) lcf->codes->elts + lcf->codes->nelts
+            - (u_char *) if_code;
+
+    /* the code array belong to parent block */
+
+    nlcf->codes = NULL;
+
+    return NGX_CONF_OK;
+}
+
+
+static char *
+ngx_http_rewrite_if_condition_extend(ngx_conf_t *cf, ngx_http_rewrite_loc_conf_t *lcf)
+{
+    u_char                        *p;
+    size_t                         len;
+    ngx_str_t                     *value;
+    ngx_uint_t                     cur, last, i, ncond, value_last;
+    ngx_regex_compile_t            rc;
+    ngx_http_script_code_pt       *code;
+    ngx_http_script_file_code_t   *fop;
+    ngx_http_script_regex_code_t  *regex;
+    u_char                         errstr[NGX_MAX_CONF_ERRSTR];
+    ngx_uint_t                     magic = 0;
+
+    value = cf->args->elts;
+    value_last = cf->args->nelts - 1;
+    ncond = 0;
+    last = 1;
+
+    if (value[value_last].len < 1 || value[value_last].data[value[value_last].len - 1] != ')') {
+        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
+                           "invalid condition \"%V\"", &value[value_last]);
+        return NGX_CONF_ERROR;
+    }
+
+    for (i = 1, cur = 1; i < cf->args->nelts; i++) {
+
+        if (value[i].len < 1
+                || value[i].data[value[i].len-1] != ')'
+            ) {
+            continue;
+        }
+
+        last = i;
+
+        if (value[cur].len < 1 || value[cur].data[0] != '(') {
+            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
+                    "invalid condition \"%V\"", &value[cur]);
+            return NGX_CONF_ERROR;
+        }
+
+        if (value[cur].len == 1) {
+            cur++;
+
+        } else {
+            value[cur].len--;
+            value[cur].data++;
+        }
+
+        if (value[last].len == 1) {
+            last--;
+            magic = 1;
+
+        } else {
+            value[last].len--;
+            value[last].data[value[last].len] = '\0';
+            magic = 0;
+        }
+
+        ncond++;
+        len = value[cur].len;
+        p = value[cur].data;
+
+        if (len > 1 && p[0] == '$') {
+
+            if (cur != last && cur + 2 != last) {
+                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
+                        "invalid condition \"%V\"", &value[cur]);
+                return NGX_CONF_ERROR;
+            }
+
+            if (ngx_http_rewrite_variable(cf, lcf, &value[cur]) != NGX_CONF_OK) {
+                return NGX_CONF_ERROR;
+            }
+
+            if (cur == last) {
+                cur = last + 1 + magic;
+                continue;
+            }
+
+            cur++;
+
+            len = value[cur].len;
+            p = value[cur].data;
+
+            if (len == 1 && p[0] == '=') {
+
+                if (ngx_http_rewrite_value(cf, lcf, &value[last]) != NGX_CONF_OK) {
+                    return NGX_CONF_ERROR;
+                }
+
+                code = ngx_http_script_start_code(cf->pool, &lcf->codes,
+                        sizeof(uintptr_t));
+
+                if (code == NULL) {
+                    return NGX_CONF_ERROR;
+                }
+
+                *code = ngx_http_script_equal_code;
+
+                cur = last + 1 + magic;
+                continue;
+            }
+
+            if (len == 1 && p[0] == '>') {
+
+                if (ngx_http_rewrite_value(cf, lcf, &value[last]) != NGX_CONF_OK) {
+                    return NGX_CONF_ERROR;
+                }
+
+                code = ngx_http_script_start_code(cf->pool, &lcf->codes,
+                        sizeof(uintptr_t));
+
+                if (code == NULL) {
+                    return NGX_CONF_ERROR;
+                }
+
+                *code = ngx_http_script_greater_than_code;
+
+                cur = last + 1 + magic;
+                continue;
+            }
+
+            if (len == 1 && p[0] == '<') {
+
+                if (ngx_http_rewrite_value(cf, lcf, &value[last]) != NGX_CONF_OK) {
+                    return NGX_CONF_ERROR;
+                }
+
+                code = ngx_http_script_start_code(cf->pool, &lcf->codes,
+                        sizeof(uintptr_t));
+
+                if (code == NULL) {
+                    return NGX_CONF_ERROR;
+                }
+
+                *code = ngx_http_script_less_than_code;
+
+                cur = last + 1 + magic;
+                continue;
+            }
+
+            if (len == 2 && ((p[0] == '!' && p[1] == '<')
+                    || (p[0] == '>' && p[1] == '='))) {
+
+                if (ngx_http_rewrite_value(cf, lcf, &value[last]) != NGX_CONF_OK) {
+                    return NGX_CONF_ERROR;
+                }
+
+                code = ngx_http_script_start_code(cf->pool, &lcf->codes,
+                        sizeof(uintptr_t));
+
+                if (code == NULL) {
+                    return NGX_CONF_ERROR;
+                }
+
+                *code = ngx_http_script_greater_equal_code;
+                cur = last + 1 + magic;
+                continue;
+            }
+
+            if (len == 2 && ((p[0] == '!' && p[1] == '>')
+                    || (p[0] == '<' && p[1] == '='))) {
+
+                if (ngx_http_rewrite_value(cf, lcf, &value[last]) != NGX_CONF_OK) {
+                    return NGX_CONF_ERROR;
+                }
+
+                code = ngx_http_script_start_code(cf->pool, &lcf->codes,
+                        sizeof(uintptr_t));
+
+                if (code == NULL) {
+                    return NGX_CONF_ERROR;
+                }
+
+                *code = ngx_http_script_less_equal_code;
+                cur = last + 1 + magic;
+                continue;
+            }
+
+            if (len == 2 && p[0] == '!' && p[1] == '=') {
+
+                if (ngx_http_rewrite_value(cf, lcf, &value[last]) != NGX_CONF_OK) {
+                    return NGX_CONF_ERROR;
+                }
+
+                code = ngx_http_script_start_code(cf->pool, &lcf->codes,
+                        sizeof(uintptr_t));
+
+                if (code == NULL) {
+                    return NGX_CONF_ERROR;
+                }
+
+                *code = ngx_http_script_not_equal_code;
+                cur = last + 1 + magic;
+                continue;
+            }
+
+            if ((len == 1 && p[0] == '~')
+                    || (len == 2 && p[0] == '~' && p[1] == '*')
+                    || (len == 2 && p[0] == '!' && p[1] == '~')
+                    || (len == 3 && p[0] == '!' && p[1] == '~' && p[2] == '*')) {
+                regex = ngx_http_script_start_code(cf->pool, &lcf->codes,
+                        sizeof(ngx_http_script_regex_code_t));
+
+                if (regex == NULL) {
+                    return NGX_CONF_ERROR;
+                }
+
+                ngx_memzero(regex, sizeof(ngx_http_script_regex_code_t));
+
+                ngx_memzero(&rc, sizeof(ngx_regex_compile_t));
+
+                rc.pattern = value[last];
+                rc.options = (p[len - 1] == '*') ? NGX_REGEX_CASELESS : 0;
+                rc.err.len = NGX_MAX_CONF_ERRSTR;
+                rc.err.data = errstr;
+
+                regex->regex = ngx_http_regex_compile(cf, &rc);
+
+                if (regex->regex == NULL) {
+                    return NGX_CONF_ERROR;
+                }
+
+                regex->code = ngx_http_script_regex_start_code;
+                regex->next = sizeof(ngx_http_script_regex_code_t);
+                regex->test = 1;
+
+                if (p[0] == '!') {
+                    regex->negative_test = 1;
+                }
+
+                regex->name = value[last];
+
+                cur = last + 1 + magic;
+                continue;
+            }
+
+            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
+                    "unexpected \"%V\" in condition", &value[cur]);
+            return NGX_CONF_ERROR;
+
+        } else if ((len == 2 && p[0] == '-')
+                || (len == 3 && p[0] == '!' && p[1] == '-')) {
+            if (cur + 1 != last) {
+                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
+                        "invalid condition \"%V\"", &value[cur]);
+                return NGX_CONF_ERROR;
+            }
+
+            value[last].data[value[last].len] = '\0';
+            value[last].len++;
+
+            if (ngx_http_rewrite_value(cf, lcf, &value[last]) != NGX_CONF_OK) {
+                return NGX_CONF_ERROR;
+            }
+
+            fop = ngx_http_script_start_code(cf->pool, &lcf->codes,
+                    sizeof(ngx_http_script_file_code_t));
+
+            if (fop == NULL) {
+                return NGX_CONF_ERROR;
+            }
+
+            fop->code = ngx_http_script_file_code;
+
+            if (p[1] == 'f') {
+                fop->op = ngx_http_script_file_plain;
+
+                cur = last + 1 + magic;
+                continue;
+            }
+
+            if (p[1] == 'd') {
+                fop->op = ngx_http_script_file_dir;
+
+                cur = last + 1 + magic;
+                continue;
+            }
+
+            if (p[1] == 'e') {
+                fop->op = ngx_http_script_file_exists;
+
+                cur = last + 1 + magic;
+                continue;
+            }
+
+            if (p[1] == 'x') {
+                fop->op = ngx_http_script_file_exec;
+
+                cur = last + 1 + magic;
+                continue;
+            }
+
+            if (p[0] == '!') {
+                if (p[2] == 'f') {
+                    fop->op = ngx_http_script_file_not_plain;
+
+                    cur = last + 1 + magic;
+                    continue;
+                }
+
+                if (p[2] == 'd') {
+                    fop->op = ngx_http_script_file_not_dir;
+
+                    cur = last + 1 + magic;
+                    continue;
+                }
+
+                if (p[2] == 'e') {
+                    fop->op = ngx_http_script_file_not_exists;
+
+                    cur = last + 1 + magic;
+                    continue;
+                }
+
+                if (p[2] == 'x') {
+                    fop->op = ngx_http_script_file_not_exec;
+
+                    cur = last + 1 + magic;
+                    continue;
+                }
+            }
+
+            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
+                    "invalid condition \"%V\"", &value[cur]);
+            return NGX_CONF_ERROR;
+        }
+    }
+
+    if (i != last + 1 + magic) {
+        return NGX_CONF_ERROR;
+    }
+
+    if (ngx_strncasecmp(value[0].data, (u_char *) "if_any", value[0].len) == 0) {
+        while (--ncond) {
+            code = ngx_http_script_start_code(cf->pool, &lcf->codes,
+                    sizeof(uintptr_t));
+
+            if (code == NULL) {
+                return NGX_CONF_ERROR;
+            }
+
+            *code = ngx_http_script_or_code;
+        }
+
+    } else if (ngx_strncasecmp(value[0].data, (u_char *) "if_all", value[0].len) == 0) {
+        while (--ncond) {
+            code = ngx_http_script_start_code(cf->pool, &lcf->codes,
+                    sizeof(uintptr_t));
+
+            if (code == NULL) {
+                return NGX_CONF_ERROR;
+            }
+
+            *code = ngx_http_script_and_code;
+        }
+    }
+
+    return NGX_CONF_OK;
+}
diff --git a/src/http/ngx_http_script.c b/src/http/ngx_http_script.c
index a2b9f1b..3bc9dbe 100644
--- a/src/http/ngx_http_script.c
+++ b/src/http/ngx_http_script.c
@@ -1898,3 +1898,217 @@ ngx_http_script_nop_code(ngx_http_script_engine_t *e)
 {
     e->ip += sizeof(uintptr_t);
 }
+
+
+void
+ngx_http_script_greater_than_code(ngx_http_script_engine_t *e)
+{
+    ngx_http_variable_value_t  *val, *res;
+
+    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, e->request->connection->log, 0,
+                   "http script greater");
+
+    e->sp--;
+    val = e->sp;
+    res = e->sp - 1;
+
+    e->ip += sizeof(uintptr_t);
+
+    if (ngx_atoi(res->data, res->len) > ngx_atoi(val->data, val->len)) {
+        ngx_log_debug0(NGX_LOG_DEBUG_HTTP, e->request->connection->log, 0,
+                   "http script greater: yes");
+        *res = ngx_http_variable_true_value;
+        return;
+    }
+
+    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, e->request->connection->log, 0,
+                   "http script greater: no");
+
+    *res = ngx_http_variable_null_value;
+}
+
+void
+ngx_http_script_greater_equal_code(ngx_http_script_engine_t *e)
+{
+    ngx_http_variable_value_t  *val, *res;
+
+    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, e->request->connection->log, 0,
+                   "http script greater equal");
+
+    e->sp--;
+    val = e->sp;
+    res = e->sp - 1;
+
+    e->ip += sizeof(uintptr_t);
+
+    if (ngx_atoi(res->data, res->len) >= ngx_atoi(val->data, val->len)) {
+        *res = ngx_http_variable_true_value;
+        return;
+    }
+
+    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, e->request->connection->log, 0,
+                   "http script greater equal: no");
+
+    *res = ngx_http_variable_null_value;
+}
+
+
+void
+ngx_http_script_less_than_code(ngx_http_script_engine_t *e)
+{
+    ngx_http_variable_value_t  *val, *res;
+
+    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, e->request->connection->log, 0,
+                   "http script less");
+
+    e->sp--;
+    val = e->sp;
+    res = e->sp - 1;
+
+    e->ip += sizeof(uintptr_t);
+
+    if (ngx_atoi(res->data, res->len) < ngx_atoi(val->data, val->len)) {
+        *res = ngx_http_variable_true_value;
+        return;
+    }
+
+    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, e->request->connection->log, 0,
+                   "http script less than: no");
+
+    *res = ngx_http_variable_null_value;
+}
+
+
+void
+ngx_http_script_less_equal_code(ngx_http_script_engine_t *e)
+{
+    ngx_http_variable_value_t  *val, *res;
+
+    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, e->request->connection->log, 0,
+                   "http script less_equal");
+
+    e->sp--;
+    val = e->sp;
+    res = e->sp - 1;
+
+    e->ip += sizeof(uintptr_t);
+
+    if (ngx_atoi(res->data, res->len) <= ngx_atoi(val->data, val->len)) {
+        *res = ngx_http_variable_true_value;
+        return;
+    }
+
+    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, e->request->connection->log, 0,
+                   "http script less_equal: no");
+
+    *res = ngx_http_variable_null_value;
+}
+
+void
+ngx_http_script_longer_code(ngx_http_script_engine_t *e)
+{
+    ngx_http_variable_value_t  *val, *res;
+
+    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, e->request->connection->log, 0,
+                   "http script longer");
+
+    e->sp--;
+    val = e->sp;
+    res = e->sp - 1;
+
+    e->ip += sizeof(uintptr_t);
+
+    if (ngx_atoi(res->data, res->len) > val->len)
+    {
+        *res = ngx_http_variable_true_value;
+        return;
+    }
+
+    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, e->request->connection->log, 0,
+                   "http script longer: no");
+
+    *res = ngx_http_variable_null_value;
+}
+
+
+void
+ngx_http_script_shorter_code(ngx_http_script_engine_t *e)
+{
+    ngx_http_variable_value_t  *val, *res;
+
+    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, e->request->connection->log, 0,
+                   "http script shorter");
+
+    e->sp--;
+    val = e->sp;
+    res = e->sp - 1;
+
+    e->ip += sizeof(uintptr_t);
+
+    if (ngx_atoi(res->data, res->len) < val->len)
+    {
+        *res = ngx_http_variable_true_value;
+        return;
+    }
+
+    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, e->request->connection->log, 0,
+                   "http script shorter: no");
+
+    *res = ngx_http_variable_null_value;
+}
+
+void
+ngx_http_script_or_code(ngx_http_script_engine_t *e)
+{
+    ngx_http_variable_value_t  *val, *res;
+
+    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, e->request->connection->log, 0,
+                   "http script or");
+
+    e->sp--;
+    val = e->sp;
+    res = e->sp - 1;
+
+    e->ip += sizeof(uintptr_t);
+
+    if ((val->len && val->data[0] != '0') || (res->len && res->data[0] != '0'))
+    {
+        ngx_log_debug0(NGX_LOG_DEBUG_HTTP, e->request->connection->log, 0,
+                   "http script or: yes");
+        *res = ngx_http_variable_true_value;
+        return;
+    }
+
+    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, e->request->connection->log, 0,
+                   "http script or: no");
+
+    *res = ngx_http_variable_null_value;
+}
+
+void
+ngx_http_script_and_code(ngx_http_script_engine_t *e)
+{
+    ngx_http_variable_value_t  *val, *res;
+
+    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, e->request->connection->log, 0,
+                   "http script and");
+
+    e->sp--;
+    val = e->sp;
+    res = e->sp - 1;
+
+    e->ip += sizeof(uintptr_t);
+
+    if ((val->len && val->data[0] != '0') && (res->len && res->data[0] != '0')) {
+
+        ngx_log_debug0(NGX_LOG_DEBUG_HTTP, e->request->connection->log, 0,
+               "http script and: yes");
+        *res = ngx_http_variable_true_value;
+        return;
+    }
+
+    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, e->request->connection->log, 0,
+                   "http script and: no");
+
+    *res = ngx_http_variable_null_value;
+}
diff --git a/src/http/ngx_http_script.h b/src/http/ngx_http_script.h
index 4360038..096465a 100644
--- a/src/http/ngx_http_script.h
+++ b/src/http/ngx_http_script.h
@@ -266,4 +266,13 @@ void ngx_http_script_var_code(ngx_http_script_engine_t *e);
 void ngx_http_script_nop_code(ngx_http_script_engine_t *e);
 
 
+void ngx_http_script_greater_than_code(ngx_http_script_engine_t *e);
+void ngx_http_script_greater_equal_code(ngx_http_script_engine_t *e);
+void ngx_http_script_less_than_code(ngx_http_script_engine_t *e);
+void ngx_http_script_less_equal_code(ngx_http_script_engine_t *e);
+void ngx_http_script_longer_code(ngx_http_script_engine_t *e);
+void ngx_http_script_shorter_code(ngx_http_script_engine_t *e);
+void ngx_http_script_or_code(ngx_http_script_engine_t *e);
+void ngx_http_script_and_code(ngx_http_script_engine_t *e);
+
 #endif /* _NGX_HTTP_SCRIPT_H_INCLUDED_ */
