diff --git a/src/http/modules/ngx_http_slice_filter_module.c b/src/http/modules/ngx_http_slice_filter_module.c
index 186380a..ed1c7a6 100644
--- a/src/http/modules/ngx_http_slice_filter_module.c
+++ b/src/http/modules/ngx_http_slice_filter_module.c
@@ -12,6 +12,9 @@
 
 typedef struct {
     size_t               size;
+    ngx_uint_t           allow_methods;
+    ngx_flag_t           check_etag;
+    ngx_flag_t           check_last_modified;
 } ngx_http_slice_loc_conf_t;
 
 
@@ -20,6 +23,7 @@ typedef struct {
     off_t                end;
     ngx_str_t            range;
     ngx_str_t            etag;
+    ngx_str_t            last_modified;
     unsigned             last:1;
     unsigned             active:1;
     ngx_http_request_t  *sr;
@@ -48,6 +52,25 @@ static ngx_int_t ngx_http_slice_add_variables(ngx_conf_t *cf);
 static ngx_int_t ngx_http_slice_init(ngx_conf_t *cf);
 
 
+static ngx_conf_bitmask_t  ngx_http_slice_allow_methods_mask[] = {
+    { ngx_string("GET"),      NGX_HTTP_GET },
+    { ngx_string("HEAD"),     NGX_HTTP_HEAD },
+    { ngx_string("POST"),     NGX_HTTP_POST },
+    { ngx_string("PUT"),      NGX_HTTP_PUT },
+    { ngx_string("DELETE"),   NGX_HTTP_DELETE },
+    { ngx_string("MKCOL"),    NGX_HTTP_MKCOL },
+    { ngx_string("COPY"),     NGX_HTTP_COPY },
+    { ngx_string("MOVE"),     NGX_HTTP_MOVE },
+    { ngx_string("OPTIONS"),  NGX_HTTP_OPTIONS },
+    { ngx_string("PROPFIND"), NGX_HTTP_PROPFIND },
+    { ngx_string("LOCK"),     NGX_HTTP_LOCK },
+    { ngx_string("UNLOCK"),   NGX_HTTP_UNLOCK },
+    { ngx_string("PATCH"),    NGX_HTTP_PATCH },
+    { ngx_string("TRACE"),    NGX_HTTP_TRACE },
+    { ngx_null_string, 0 }
+};
+
+
 static ngx_command_t  ngx_http_slice_filter_commands[] = {
 
     { ngx_string("slice"),
@@ -57,6 +80,27 @@ static ngx_command_t  ngx_http_slice_filter_commands[] = {
       offsetof(ngx_http_slice_loc_conf_t, size),
       NULL },
 
+    { ngx_string("slice_allow_methods"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_1MORE,
+      ngx_conf_set_bitmask_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_slice_loc_conf_t, allow_methods),
+      &ngx_http_slice_allow_methods_mask },
+
+    { ngx_string("slice_check_etag"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_FLAG,
+      ngx_conf_set_flag_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_slice_loc_conf_t, check_etag),
+      NULL },
+
+    { ngx_string("slice_check_last_modified"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_FLAG,
+      ngx_conf_set_flag_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_slice_loc_conf_t, check_last_modified),
+      NULL },
+
       ngx_null_command
 };
 
@@ -113,6 +157,12 @@ ngx_http_slice_header_filter(ngx_http_request_t *r)
         return ngx_http_next_header_filter(r);
     }
 
+    slcf = ngx_http_get_module_loc_conf(r, ngx_http_slice_filter_module);
+
+    if (!(r->method & slcf->allow_methods)) {
+        return ngx_http_next_header_filter(r);
+    }
+
     if (r->headers_out.status != NGX_HTTP_PARTIAL_CONTENT) {
         if (r == r->main) {
             ngx_http_set_ctx(r, NULL, ngx_http_slice_filter_module);
@@ -125,22 +175,44 @@ ngx_http_slice_header_filter(ngx_http_request_t *r)
         return NGX_ERROR;
     }
 
-    h = r->headers_out.etag;
+    if (slcf->check_etag) {
+        h = r->headers_out.etag;
 
-    if (ctx->etag.len) {
-        if (h == NULL
-            || h->value.len != ctx->etag.len
-            || ngx_strncmp(h->value.data, ctx->etag.data, ctx->etag.len)
-               != 0)
-        {
-            ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
-                          "etag mismatch in slice response");
-            return NGX_ERROR;
+        if (ctx->etag.len) {
+            if (h == NULL
+                || h->value.len != ctx->etag.len
+                || ngx_strncmp(h->value.data, ctx->etag.data, ctx->etag.len)
+                != 0)
+            {
+                ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
+                            "etag mismatch in slice response");
+                return NGX_ERROR;
+            }
+        }
+
+        if (h) {
+            ctx->etag = h->value;
         }
     }
 
-    if (h) {
-        ctx->etag = h->value;
+    if (slcf->check_last_modified) {
+        h = r->headers_out.last_modified;
+
+        if (ctx->last_modified.len) {
+            if (h == NULL
+                || h->value.len != ctx->last_modified.len
+                || ngx_strncmp(h->value.data, ctx->last_modified.data, ctx->last_modified.len)
+                != 0)
+            {
+                ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
+                            "last_modified mismatch in slice response");
+                return NGX_ERROR;
+            }
+        }
+
+        if (h) {
+            ctx->last_modified = h->value;
+        }
     }
 
     if (ngx_http_slice_parse_content_range(r, &cr) != NGX_OK) {
@@ -159,8 +231,6 @@ ngx_http_slice_header_filter(ngx_http_request_t *r)
                    "http slice response range: %O-%O/%O",
                    cr.start, cr.end, cr.complete_length);
 
-    slcf = ngx_http_get_module_loc_conf(r, ngx_http_slice_filter_module);
-
     end = ngx_min(cr.start + (off_t) slcf->size, cr.complete_length);
 
     if (cr.start != ctx->start || cr.end != end) {
@@ -228,6 +298,12 @@ ngx_http_slice_body_filter(ngx_http_request_t *r, ngx_chain_t *in)
         return ngx_http_next_body_filter(r, in);
     }
 
+    slcf = ngx_http_get_module_loc_conf(r, ngx_http_slice_filter_module);
+
+    if (!(r->method & slcf->allow_methods)) {
+        return ngx_http_next_body_filter(r, in);
+    }
+
     for (cl = in; cl; cl = cl->next) {
         if (cl->buf->last_buf) {
             cl->buf->last_buf = 0;
@@ -272,8 +348,6 @@ ngx_http_slice_body_filter(ngx_http_request_t *r, ngx_chain_t *in)
 
     ngx_http_set_ctx(ctx->sr, ctx, ngx_http_slice_filter_module);
 
-    slcf = ngx_http_get_module_loc_conf(r, ngx_http_slice_filter_module);
-
     ctx->range.len = ngx_sprintf(ctx->range.data, "bytes=%O-%O", ctx->start,
                                  ctx->start + (off_t) slcf->size - 1)
                      - ctx->range.data;
@@ -399,6 +473,13 @@ ngx_http_slice_range_variable(ngx_http_request_t *r,
     ngx_http_slice_ctx_t       *ctx;
     ngx_http_slice_loc_conf_t  *slcf;
 
+    slcf = ngx_http_get_module_loc_conf(r, ngx_http_slice_filter_module);
+
+    if (!(r->method & slcf->allow_methods)) {
+        v->not_found = 1;
+        return NGX_OK;
+    }
+
     ctx = ngx_http_get_module_ctx(r, ngx_http_slice_filter_module);
 
     if (ctx == NULL) {
@@ -407,8 +488,6 @@ ngx_http_slice_range_variable(ngx_http_request_t *r,
             return NGX_OK;
         }
 
-        slcf = ngx_http_get_module_loc_conf(r, ngx_http_slice_filter_module);
-
         if (slcf->size == 0) {
             v->not_found = 1;
             return NGX_OK;
@@ -504,6 +583,9 @@ ngx_http_slice_create_loc_conf(ngx_conf_t *cf)
     }
 
     slcf->size = NGX_CONF_UNSET_SIZE;
+    slcf->allow_methods = 0;
+    slcf->check_etag = NGX_CONF_UNSET;
+    slcf->check_last_modified = NGX_CONF_UNSET;
 
     return slcf;
 }
@@ -517,6 +599,15 @@ ngx_http_slice_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
 
     ngx_conf_merge_size_value(conf->size, prev->size, 0);
 
+    if (conf->allow_methods == 0) {
+        conf->allow_methods = prev->allow_methods;
+    }
+    conf->allow_methods |= NGX_HTTP_GET|NGX_HTTP_HEAD;
+
+    ngx_conf_merge_off_value(conf->check_etag, prev->check_etag, 1);
+
+    ngx_conf_merge_off_value(conf->check_last_modified, prev->check_last_modified, 0);
+
     return NGX_CONF_OK;
 }
 
